@page "/"
@using TicketingFE.Models
@inject TicketApiService TicketService
@inject UserApiService UserService

<PageTitle>Ticketing Home</PageTitle>

<MudGrid>
    <MudItem xs="6">
    </MudItem>
    <MudItem xs="3">
    @if(false && Users != null && Users.Any())
    {
        <MudSelect @bind-Value="SelectedUserId">
            <MudSelectItem T="Guid?" Value="@(null)">user.Name</MudSelectItem>
            @foreach(var user in Users)
            {
                <MudSelectItem Value="@user.Id">@user.Name</MudSelectItem>
            }
        </MudSelect>
    }
    </MudItem>
    <MudItem xs="3">
    </MudItem>
</MudGrid>

<MudTable Items="@Tickets" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Assigned User</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Status" HideSmall="_hidePosition">@context.TicketStatusDisplay</MudTd>
        <MudTd DataLabel="Assigned User">@context.AssignedUser.Name</MudTd>
    </RowTemplate>
</MudTable>



@code {
    private bool _hidePosition;
    private bool _loading;

    private List<(string Value, string DisplayName)> statusOptions = new();
    private List<TicketResponseDTO>? Tickets { get; set; }
    private List<UserDTO>? Users { get; set; }
    private Guid? _selectedUserId;
    private Guid? SelectedUserId {
        get => _selectedUserId;
         set {
            _selectedUserId = value;
            _ = LoadTicketsAsync();
         }
    }
    private string? _selectedStatus;

    private string? SelectedStatus {
        get => _selectedStatus;
         set {
            _selectedStatus = value;
            _ = LoadTicketsAsync();
         }
    }
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _loading = true;

            var ticketTask = TicketService.GetTicketsAsync(new TicketQuery());
            var userTask = UserService.GetUsersAsync();

            await Task.WhenAll(ticketTask, userTask);

            Tickets = ticketTask.Result;
            Users = userTask.Result;

           Tickets = await TicketService.GetTicketsAsync(new TicketQuery());
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error on initial load: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task LoadTicketsAsync()
    {
        try
        {
            TicketQuery query = new TicketQuery
            {
                Status = SelectedStatus,
                UserId = SelectedUserId.ToString()
            };

            Tickets = await TicketService.GetTicketsAsync(new TicketQuery());
        }
        catch(Exception ex)
        {
            Console.Error.WriteLine($"Error loading tickets: {ex.Message}");
        }
    }
}